@model Carpool.Models.Lift

@{
    ViewBag.Title = "Offer Lift";
}

    <div>
        <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=&sensor=false"></script>
    </div>
@if (User.IsInRole("Driver"))
{
    using (Html.BeginForm())
    {
            @Html.AntiForgeryToken()
        <br />
        <br />
        <br/>
        <h2>Offer Lift</h2>
            <div class="form-horizontal">
                <div class="row">
                    <hr />
                    <div class="col-md-5">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.liftType, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-8">
                                @Html.EnumDropDownListFor(model => model.liftType, htmlAttributes: new { @class = "form-control" })
                            </div>
                        </div>
                        
                        <div class="form-group">
                            @Html.LabelFor(model => model.StartPoint, htmlAttributes: new { @class = "control-label col-md-3", })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.StartPoint, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.StartPoint, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.EndPoint, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.EndPoint, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.EndPoint, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.LiftDate, htmlAttributes: new { @class = "control-label col-md-3" })
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.LiftDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.LiftDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>
                        </div>
                    <div class="col-md-3">
                        <p><b>&nbsp;Outbound Journey</b></p>
                        <div class="form-group">
                            @Html.LabelFor(model => model.OutboundStartTime, htmlAttributes: new { @class = "control-label col-md-5" })
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.OutboundStartTime, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.OutboundStartTime, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.OutboundEndTime, htmlAttributes: new { @class = "control-label col-md-5" })
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.OutboundEndTime, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.OutboundEndTime, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <p><b>&nbsp;Inbound Journey</b></p>

                        <div class="form-group">
                            @Html.LabelFor(model => model.OneWayLift, htmlAttributes: new { @class = "control-label col-md-5" })
                            <div class="col-md-6">
                                @Html.CheckBoxFor(model => model.OneWayLift, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.OneWayLift, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.InboundStartTime, htmlAttributes: new { @class = "control-label col-md-5", id = "lblStartTime" })
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.InboundStartTime, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.InboundStartTime, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.InboundEndTime, htmlAttributes: new { @class = "control-label col-md-5", id = "lblEndTime" })
                            <div class="col-md-6">
                                @Html.EditorFor(model => model.InboundEndTime, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.InboundEndTime, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    @using (Html.BeginForm("OfferLift", "Home"))
                    {
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" name="Home" value="Create" class="btn btn-success" />
                            </div>
                        </div>
                    }
                </div>
            </div>
    }

            <div>
                @Html.ActionLink("Back to List", "Index")
            </div>
}
else
{
    @Html.Label("You must be logged in as a driver to offer lifts")
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=AIzaSyDBthan2ga94Vh1GR8kSsUYwND2m5Ahk48&"></script>
    <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=AIzaSyDBthan2ga94Vh1GR8kSsUYwND2m5Ahk48&libraries=places"></script>
    <script>

            google.maps.event.addDomListener(window, 'load', function () {
                var options = {
                    types: ['(cities)'],
                    componentRestrictions: { country: "irl" }
                };

                var input = document.getElementById('StartPoint');
                var input2 = document.getElementById('EndPoint');
                var places = new google.maps.places.Autocomplete(input, options);
                var places2 = new google.maps.places.Autocomplete(input2, options);


            });
    </script>
<script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
<script>
    $(function () {
        $("#OneWayLift").click(function () {
            if ($(this).is(':checked')) {
                
                $("#InboundStartTime").hide();
                $("#InboundEndTime").hide();
                $("#lblEndTime").hide();
                $("#lblStartTime").hide();
                document.getElementById("InboundStartTime").value = "";
                document.getElementById("InboundEndTime").value = "";
                $("#InboundStartTime").rules("remove", "required");
                $("#InboundEndTime").rules("remove", "required");
            }
            else {
                $("#InboundStartTime").show();
                $("#InboundEndTime").show();
                $("#lblEndTime").show();
                $("#lblStartTime").show();
            }
        });
    });
</script>
}

<style>
    .clearfix{
    clear: both;
    padding: 0;
    margin: 0;
    height: 5px;
    display: block;}
</style>